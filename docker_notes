DOCKER: 
--15 jan 2023

What is docker?
docker file (contains all code,configs,libraries,packages etc used in any project/app)
docker image (Built version of docker file)
docker container (running version of the docker image)
https://hub.docker.com/
https://docs.docker.com/
https://labs.play-with-docker.com/ (docker playground)
https://dockerlabs.collabnix.com/docker/cheatsheet/


commands:
docker --version
docker pull imgname
docker image ls
docker run imgname or imgid -> initiates a container, runs an image, pulls and runs an image if the image is not present locally
docker rm imgname or imgid -> removes a container
docker rmi imgname or imgid -> removes a image
docker ps -> shows running containers
clear,cls
docker ps -a -> shows all container (state does not matter : running/stop)
docker rm $(docker ps -a -q) -> removes all running container on one go
docker ps -a -q -> gives container id for all running containers

-------------------------------------------------------------------------------------------------------------------------------------
--16 jan 2023
docker pull imgname:version(By default is latest)
docker run imgname or imgid 
docker ps
docker stop containerid
cls

docker run --name customname -P imgname:version -> gives custom name to an image
docker run -p desiredportnumber:defaultportnumber imgname -> port mapping (container runs on our custom mapped port number)
defaultportnumber: 8080
desiredportnumber: 9000,9001
verify using browser -> localhost:desiredportnumber
cat index.html -> code of browser content


--debugging
docker logs containerid/containername
docker exec -it contaierid bash(or any other terminal type) (it -> interactive terminal) : enters into terminal/container
ls (list out files in the dir)
cd .. (previous dir)
cat filename -> reads the file
exit -> exit from terminal
--debugging

--Creating a docker file for any application:
given : python flask application (app.py : timer app) and requirement.txt(written flask in it)
open VS code 
go to terminal
touch Dockerfile (D should be capital) -> write docker code here
docker build -t imgname:versionname directory -> builds an image in the mentioned dir with the given imgname 

-------------------------------------------------------------------------------------------------------------------------------------
--17 jan 2023

docker build -t hellopython:latest . ('.'  means root folder or current directory?)
docker run -p 8082:8070 ce12         ('ce12' is first 4 letter of the imgid for hellopython and 8070 will be mapped in app.py)

open docker hub container or check url : localhost:8082 -> app will be running (app.py : timer app)



--------
Given another node app (simple to-do app : getting-started)
create the Dockerfile, build the image (getting-started)
docker run -d -p 3000:3000 getting-started (-d : detached mode / running in background i.e runs even when the terminal is closed)
or,docker run -dp 3000:3000 getting-started 

docker rmi -f imgid (forcefully removes/deletes and image)


---------------------

sharing the docker app?
go to docker hub
create repo for the app
come back to terminal

docker tag imgname dockerhubprofileid/reponame  (imgname = getting-started, reponame = getting-started)
docker push dockerhubprofileid/reponame


ask the user to just simply use docker pull and docker run commands 
or only the docker run (this will automatically pull the image if not present)


---------------------

docker networking?
used to create networking between the containers (as by default all containers are isolated)
Requirement: creating network between two diiferent running container,
1.getting-started(my node app) and  -> frontend container
2.sql -> backend container
so that in case the app is down then app data is safe in sql

D:\getting-started\app> docker network create todo-app
D:\getting-started\app> docker run  -d `                ("`" -> next line)
>> --network todo-app --network-alias mysql `
>> -v todo-mysql-data:/var/lib/mysql `             (todo-mysql-data-> container folder, /var/lib/mysql-> host/local machine folder ) -> volume mounting
>> -e MYSQL_ROOT_PASSWORD=secret `
>> -e MYSQL_DATABASE=todos `
>> mysql:8:0 (imgname on docker hub for sql app)


volume mounting: (volume -> data) : mounting container db data to local path so that data can be persisted till the availability of the host machine
container DB path:local host path

volume mounting is used to make data persistent in case the container crashes

entering into mysql container:
D:\getting-started\app> docker exec -it 2771 mysql -u root -p (2771 is first 4 letter of sql image id)
mysql> show databases -> shows all DB's (todos DB also)
mysql> exit
D:\getting-started\app> 

---------------------------------


D:\getting-started\app> docker run -it --network todo-app nicolaka/netshoot  (todo-app:network name for getting-started app,nicolaka/netshoot:img on dockerhub)
 b27bbfc184c5 0 ~ 0 dig mysql
 ip address of sql is fetched
 b27bbfc184c5 0 ~ 0 exit

D:\getting-started\app> docker exec -it imgid mysql -u root -p
mysql> ALTER user 'root' IDENTIFIED WITH mysql_native_passowrd BY 'secret';
mysql> flush privileges;
mysql> exit
D:\getting-started\app> docker run -dp 3000:3000 `
>> -w /app -v "$(pwd):app" `            (mounting app with present working directory)
>> --network todo-app `                 (network name)
>> -e MYSQL_HOST=mysql `
>> -e MYSQL_USER=root `
>> -e MYSQL_PASSWORD=secret `
>> -e MYSQL_DB=todos  `
>> node:18-alpine `                      (root app)
>> sh -c "yarn install && yarn run dev"  (runs application, yarn is the package manager here)

D:\getting-started\app> docker logs -f sqlcontainerid
D:\getting-started\app> docker exec -it imgid mysql -p todos
mysql> select * from todo_items;

------------------------


(frontend service+backend service) in single file?
docker compose file: docker-compose.yml -> contains the docker code (Dockerfile + volume mounting + networking part)  
D:\getting-started\app> docker compose version 
D:\getting-started\app> docker compose up (runs all services frontend,backend or n number of services)
D:\getting-started\app> docker compose down (shut down the containers)


-------------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------------
